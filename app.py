from flask import Flask, render_template, jsonify, request
from flask_cors import CORS
from signal_service import SignalModerationService
import os

app = Flask(__name__)
CORS(app)

# Initialize Signal service
signal_service = SignalModerationService()

@app.route('/')
def index():
    """Main dashboard"""
    return render_template('dashboard.html')

@app.route('/health')
def health():
    """Health check endpoint"""
    health_status = signal_service.get_health()
    return jsonify(health_status)

@app.route('/api/stats')
def get_stats():
    """Get member statistics"""
    try:
        stats = signal_service.get_member_statistics()
        return jsonify(stats)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/members')
def get_members():
    """Get all group members"""
    try:
        members = signal_service.get_group_members()
        return jsonify(members)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/members/search')
def search_members():
    """Search members"""
    query = request.args.get('q', '')
    try:
        members = signal_service.search_members(query)
        return jsonify(members)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/members/inactive')
def get_inactive_members():
    """Get inactive members"""
    days = int(request.args.get('days', 30))
    try:
        members = signal_service.get_inactive_members(days)
        return jsonify(members)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/groups')
def get_groups():
    """Get all groups"""
    try:
        groups = signal_service.get_groups()
        return jsonify(groups)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/send-message', methods=['POST'])
def send_message():
    """Send message to group"""
    try:
        data = request.get_json()
        message = data.get('message', '')
        group_id = data.get('group_id')
        
        result = signal_service.send_message_to_group(message, group_id)
        return jsonify(result)
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500

@app.route('/api/sync-profiles', methods=['POST'])
def sync_profiles():
    """Force profile sync"""
    try:
        result = signal_service.force_profile_sync()
        return jsonify(result)
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500

@app.route('/api/send-member-list', methods=['POST'])
def send_member_list():
    """Send member list to group"""
    try:
        data = request.get_json()
        group_id = data.get('group_id')
        
        # Get member statistics
        stats = signal_service.get_member_statistics()
        members = signal_service.get_group_members()
        
        # Create member list message
        message = f"📊 **Group Member Report**\\n\\n"
        message += f"👥 **Total Members:** {stats['total_members']}\\n"
        message += f"✅ **Known Profiles:** {stats['members_with_profiles']} ({stats['profile_resolution_rate']}%)\\n"
        message += f"📱 **Phone Numbers:** {stats['phone_members']}\\n"
        message += f"🆔 **UUID Members:** {stats['uuid_members']}\\n\\n"
        
        message += "**Member List:**\\n"
        for i, member in enumerate(members[:20], 1):  # Limit to first 20 for message length
            icon = "📱" if member.get('member_type') == 'phone' else "👤"
            status = "✅" if member.get('has_profile') else "❓"
            message += f"{i}. {icon} {member.get('display_name')} {status}\\n"
        
        if len(members) > 20:
            message += f"\\n... and {len(members) - 20} more members\\n"
        
        message += f"\\n🤖 Generated by Signal Moderation Bot"
        
        result = signal_service.send_message_to_group(message, group_id)
        return jsonify(result)
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)

